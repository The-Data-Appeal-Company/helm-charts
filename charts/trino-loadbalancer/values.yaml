replicaCount: 2

image:
  repository: datappeal/trino-loadbalancer
  tag: sha-21f25e08
  pullPolicy: Always

imagePullSecrets: [ ]
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  annotations: { }
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: [ ]
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
#   cpu: 100m
#   memory: 128Mi

nodeSelector: { }

tolerations: [ ]

affinity: { }


discovery:
  enabled: false
  delay: 600s

controller:
  enabled: false
  delay: 10s

autoscaler:
  enabled: false
  delay: 10s

config:
  proxy:
    port: 8998

  routing:
    rule: round-robin
    users:
      default:
        behaviour: default
        cluster: {}
      rules: []

  clusters:
    sync:
      delay: 10s
    statistics:
      enabled: true
      delay: 5s
    healthcheck:
      enabled: true
      delay: 5s

  persistence:
    postgres:
      db: 'postgres'
      host: '127.0.0.1'
      port: 5432
      username: 'trinohub'
      password: 'trino'
      ssl_mode: 'disable'

  discovery:
    providers:
      - provider: static
        enabled: false
        static:
          clusters:
            - name: cluster-0
              enabled: true
              url: http://localhost:8080
              tags:
                local: true
                env: dev

      - provider: aws-emr
        enabled: false
        aws:
          access_key_id: ''
          secret_key: ''
          region: 'eu-west-1'
      - provider: k8s
        enabled: false
        k8s:
          kube_config: 'tdac-test'
          cluster_domain: 'cluster.local'
          selector_tags:
            component: 'coordinator'
            deployment: 'trino'

  controller:
    features:
      slow_worker_drainer:
        enabled: false
        gracePeriodSeconds: 300
        dryRun: true
        drainThreshold: 3
        provider: k8s
        k8s:
          namespaceSelector: { }
        analyzer:
          std_deviation_ratio: 3

  notifier:
    slack:
      webhook: ""

  session:
    store:
      redis:
        opts:
          prefix: 'trino::'
          max_ttl: 24h

        standalone:
          enabled: true
          host: '127.0.0.1:6379'
          password: ''
          db: 0

        sentinel:
          enabled: false
          master: 'mymaster'
          hosts: [ '','' ]
          password: ''
          db: 0
