apiVersion: apps/v1
kind: {{ .Values.server.kind }}
metadata:
  name: {{ template "trino.coordinator" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: coordinator
spec:

  selector:
    matchLabels:
      app: {{ template "trino.name" . }}
      release: {{ .Release.Name }}
      component: coordinator
  {{ if (eq .Values.server.kind "StatefulSet") }}
  serviceName: {{ template "trino.coordinator.svcName" . }}
  {{ end }}
  template:
    metadata:
      labels:
        app: {{ template "trino.name" . }}
        release: {{ .Release.Name }}
        component: coordinator
    spec:
      {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        fsGroup: {{ .runAsGroup }}
      {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "trino.coordinator" . }}
        - name: connectors-config-volume
          configMap:
            name: {{ template "trino.connectors" . }}
        {{ if .Values.exporters.jmx.enabled }}
        - name: config-jmx-exporter
          configMap:
            name: {{ template "trino.jmx-exporter" . }}
        {{ end }}
        {{ if or (not .Values.worker.persistence.enabled) (not (eq .Values.server.kind "StatefulSet")) }}
        - name: trino-data
          emptyDir: {}
        {{ end }}
      containers:
        - name: {{ .Chart.Name }}-coordinator
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          {{- with .Values.securityContext }}
          securityContext:
            runAsUser: {{ .runAsUser }}
            runAsGroup: {{ .runAsGroup }}
          {{- end }}
          volumeMounts:
            - mountPath: {{ .Values.server.config.path }}
              name: config-volume
            - mountPath: {{ .Values.server.config.path }}/catalog
              name: connectors-config-volume
            - name: trino-data
              mountPath: {{ .Values.coordinator.persistence.path }}
              {{- if .Values.coordinator.persistence.subPath }}
              subPath: {{ .Values.coordinator.persistence.subPath }}
              {{- else if .Values.coordinator.persistence.subPathExpr }}
              subPathExpr: {{ .Values.coordinator.persistence.subPathExpr }}
              {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
          readinessProbe:
            httpGet:
              path: /v1/info
              port: http
          resources:
            {{- toYaml .Values.coordinator.resources | nindent 12 }}


        {{ if .Values.exporters.jmx.enabled }}
        - name: jmx-exporter
          image: "{{ .Values.exporters.jmx.image.repository }}:{{ .Values.exporters.jmx.image.tag }}"
          imagePullPolicy: {{ .Values.exporters.jmx.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.exporters.jmx.port }}
              protocol: TCP
              name: prom-exporter
          livenessProbe:
            httpGet:
              path: /metrics
              port: prom-exporter
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /metrics
              port: prom-exporter
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          env:
            - name: SERVICE_PORT
              value: {{ .Values.exporters.jmx.port | quote }}
            {{- with .Values.exporters.jmx.env }}
            {{- range $key, $value := . }}
            - name: {{ $key | upper | replace "." "_" }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          resources:
          {{ toYaml .Values.exporters.jmx.resources | indent 12 }}
          volumeMounts:
            - name: config-jmx-exporter
              mountPath: /opt/jmx_exporter/config.yml
              subPath: config.yml
      {{- end }}


      {{- with .Values.coordinator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.coordinator.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.coordinator.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

  {{ if and (.Values.worker.persistence.enabled ) (eq .Values.server.kind "StatefulSet") }}

  {{ if .Values.coordinator.persistentVolumeClaimRetentionPolicy.enabled }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.coordinator.persistentVolumeClaimRetentionPolicy.whenDeleted }}
    whenScaled: {{ .Values.coordinator.persistentVolumeClaimRetentionPolicy.whenScaled }}
  {{ end }}

  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: trino-data
        labels:
          app: {{ template "trino.name" . }}
          chart: {{ template "trino.chart" . }}
          release: {{ .Release.Name }}
          heritage: {{ .Release.Service }}
          component: coordinator
      spec:
        storageClassName: {{ .Values.worker.persistence.storageClass | quote }}
        accessModes:
        {{ range .Values.coordinator.persistence.accessModes }}
        - {{ . | quote }}
        {{ end }}
        resources:
          requests:
            storage: {{ .Values.coordinator.persistence.size | quote }}
  {{ end }}

