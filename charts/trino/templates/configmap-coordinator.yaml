apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "trino.coordinator" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: coordinator
data:
  {{ if .Values.exchange.enabled }}
  exchange-manager.properties: |
    exchange-manager.name=filesystem
    exchange.base-directories={{ .Values.exchange.aws.base_directories }}
    exchange.s3.region={{ .Values.exchange.aws.region }}
    exchange.s3.aws-access-key={{ .Values.exchange.aws.access_key }}
    exchange.s3.aws-secret-key={{ .Values.exchange.aws.secret_key }}
  {{ end }}

  {{ if .Values.event_listener.enabled }}
  http-event-listener.properties: |
    event-listener.name=http
    http-event-listener.log-created={{ .Values.event_listener.http.log_created }}
    http-event-listener.log-completed={{ .Values.event_listener.http.log_completed }}
    http-event-listener.log-split={{ .Values.event_listener.http.log_split }}
    http-event-listener.connect-http-headers={{ .Values.event_listener.http.headers }}
    http-event-listener.connect-retry-count={{ .Values.event_listener.http.retry_count }}
    http-event-listener.connect-retry-delay={{ .Values.event_listener.http.retry_delay }}
    http-event-listener.connect-backoff-base={{ .Values.event_listener.http.backoff_base }}
    http-event-listener.connect-max-delay={{ .Values.event_listener.http.max_delay }}
    http-event-listener.connect-ingest-uri={{ .Values.event_listener.http.ingest_uri }}
  {{ end }}

  node.properties: |
    node.environment={{ .Values.server.node.environment }}
    node.data-dir={{ .Values.server.node.dataDir }}
    plugin.dir={{ .Values.server.node.pluginDir }}

  jvm.config: |
    -server
    -XX:MaxRAMPercentage={{ .Values.server.jvm.maxMemoryPercentage }}
    -XX:MinRAMPercentage={{ .Values.server.jvm.minMemoryPercentage }}
    -XX:+{{ .Values.server.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.server.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    {{ if .Values.exporters.jmx.enabled }}
    -Dcom.sun.management.jmxremote
    -Dcom.sun.management.jmxremote.local.only=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.port={{ .Values.server.jmx.registryPort }}
    -Dcom.sun.management.jmxremote.rmi.port={{ .Values.server.jmx.serverPort }}
    {{ end }}
    {{ range $value := .Values.server.jvm.additional_params }}
    {{ $value }}
    {{end}}

  config.properties: |
    coordinator=true
{{- if gt (int .Values.server.workers) 0 }}
    node-scheduler.include-coordinator=false
{{- else }}
    node-scheduler.include-coordinator=true
{{- end }}
    http-server.http.port={{ .Values.service.port }}
    query.max-memory={{ .Values.server.config.query.maxMemory }}
    query.max-memory-per-node={{ .Values.server.config.query.maxMemoryPerNode }}
    discovery-server.enabled=true
    discovery.uri=http://localhost:{{ .Values.service.port }}
    {{ if .Values.event_listener.enabled }}
    event-listener.config-files={{ .Values.server.config.path }}/http-event-listener.properties
    {{ end }}
    {{ if .Values.exporters.jmx.enabled }}
    jmx.rmiregistry.port={{ .Values.server.jmx.registryPort }}
    jmx.rmiserver.port={{ .Values.server.jmx.serverPort }}
    {{ end }}
    {{ range $key,$value := .Values.server.config.additional_params }}
    {{ $key }}={{ $value }}
  {{end}}

  log.properties: |
    io.trinosql={{ .Values.server.log.trino.level }}

---
