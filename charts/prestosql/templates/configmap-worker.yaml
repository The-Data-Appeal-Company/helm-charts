apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "presto.worker" . }}
  labels:
    app: {{ template "presto.name" . }}
    chart: {{ template "presto.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: worker
data:
  node.properties: |
    node.environment={{ .Values.presto.worker.config.node.environment }}
    node.data-dir={{ .Values.presto.worker.config.node.dataDir }}
    plugin.dir={{ .Values.presto.worker.config.node.pluginDir }}

  jvm.config: |
    -server
    -XX:MaxRAMPercentage={{ .Values.presto.worker.config.jvm.maxMemoryPercentage }}
    -XX:MinRAMPercentage={{ .Values.presto.worker.config.jvm.minMemoryPercentage }}
    -XX:+{{ .Values.presto.worker.config.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.presto.worker.config.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    {{ range $value := .Values.presto.worker.config.jvm.additional_params }}
    {{ $value }}
    {{end}}

  config.properties: |
    coordinator=false
    http-server.http.port={{ .Values.presto.worker.config.server.port }}
    query.max-memory={{ .Values.presto.config.query.maxMemory }}
    query.max-memory-per-node={{ .Values.presto.config.query.maxMemoryPerNode }}
    discovery.uri=http://{{ template "presto.fullname" . }}:{{ .Values.presto.coordinator.config.server.port }}
    {{ range $key,$value := .Values.presto.config.additional_params }}
    {{ $key }}={{ $value }}
    {{end}}

  log.properties: |
    io.prestosql={{ .Values.presto.coordinator.config.server.loglevel }}

  health_check.sh: |
    STATE_OUT=$(curl -q http://localhost:{{ .Values.presto.worker.config.server.port }}/v1/info/state)
    EXPECTED="\"ACTIVE\""

    if [ "$STATE_OUT" != "$EXPECTED" ]
    then
      exit 1
    fi

    exit 0
