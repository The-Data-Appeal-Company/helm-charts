{{- if gt (int .Values.server.workers) 0 }}
apiVersion: apps/v1
kind: {{ .Values.server.kind }}
metadata:
  name: {{ template "trino.worker" . }}
  labels:
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: worker
spec:
  replicas: {{ .Values.server.workers }}
  {{ if (eq .Values.server.kind "StatefulSet") }}
  serviceName: {{ template "trino.worker.svcName" . }}
  {{ end }}
  selector:
    matchLabels:
      app: {{ template "trino.name" . }}
      release: {{ .Release.Name }}
      component: worker
  template:
    metadata:
      labels:
        app: {{ template "trino.name" . }}
        release: {{ .Release.Name }}
        component: worker
    spec:
      {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        fsGroup: {{ .runAsGroup }}
      {{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "trino.worker" . }}
        - name: connectors-config-volume
          configMap:
            name: {{ template "trino.connectors" . }}
        {{ if .Values.exporters.jmx.enabled }}
        - name: config-jmx-exporter
          configMap:
            name: {{ template "trino.jmx-exporter" . }}
        {{ end }}
        {{ if or (not .Values.worker.persistence.enabled) (not (eq .Values.server.kind "StatefulSet")) }}
        - name: trino-data
          emptyDir: {}
        {{ end }}
      terminationGracePeriodSeconds: {{ .Values.server.gracefulShutdown.gracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}-worker
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.securityContext }}
          securityContext:
            runAsUser: {{ .runAsUser }}
            runAsGroup: {{ .runAsGroup }}
          {{- end }}
          volumeMounts:
            - mountPath: {{ .Values.server.config.path }}
              name: config-volume
            - mountPath: {{ .Values.server.config.path }}/catalog
              name: connectors-config-volume
            - name: trino-data
              mountPath: {{ .Values.worker.persistence.path }}
              {{- if .Values.worker.persistence.subPath }}
              subPath: {{ .Values.worker.persistence.subPath }}
              {{- else if .Values.worker.persistence.subPathExpr }}
              subPathExpr: {{ .Values.worker.persistence.subPathExpr }}
              {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: {{ .Values.worker.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.worker.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.worker.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.worker.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.worker.livenessProbe.successThreshold }}
          readinessProbe:
            exec:
              command: [ /usr/lib/trino/bin/health-check ]
            initialDelaySeconds: {{ .Values.worker.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.worker.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.worker.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.worker.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.worker.readinessProbe.successThreshold }}
          {{ if .Values.server.gracefulShutdown.enabled }}
          lifecycle:
            preStop:
              exec:
                command: [
                    "sh", "-c",
                    "curl -v  -H \"X-Trino-User: admin\" -X PUT -d '\"SHUTTING_DOWN\"' -H \"Content-type: application/json\" http://localhost:8080/v1/info/state && sleep {{ .Values.server.gracefulShutdown.gracePeriodSeconds }}"
                ]
          {{end }}

          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}

        {{ if .Values.exporters.jmx.enabled }}
        - name: jmx-exporter
          image: "{{ .Values.exporters.jmx.image.repository }}:{{ .Values.exporters.jmx.image.tag }}"
          imagePullPolicy: {{ .Values.exporters.jmx.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.exporters.jmx.port }}
              protocol: TCP
              name: prom-exporter
          livenessProbe:
            httpGet:
              path: /metrics
              port: prom-exporter
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /metrics
              port: prom-exporter
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          env:
            - name: SERVICE_PORT
              value: {{ .Values.exporters.jmx.port | quote }}
            {{- with .Values.exporters.jmx.env }}
            {{- range $key, $value := . }}
            - name: {{ $key | upper | replace "." "_" }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          resources:
          {{ toYaml .Values.exporters.jmx.resources | indent 12 }}
          volumeMounts:
            - name: config-jmx-exporter
              mountPath: /opt/jmx_exporter/config.yml
              subPath: config.yml
      {{- end }}

      {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}


  {{ if and (.Values.worker.persistence.enabled ) (eq .Values.server.kind "StatefulSet") }}

  {{ if .Values.worker.persistentVolumeClaimRetentionPolicy.enabled }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: { { .Values.worker.persistentVolumeClaimRetentionPolicy.whenDeleted } }
    whenScaled: { { .Values.worker.persistentVolumeClaimRetentionPolicy.whenScaled } }
  {{ end }}

  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: trino-data
        labels:
          app: {{ template "trino.name" . }}
          chart: {{ template "trino.chart" . }}
          release: {{ .Release.Name }}
          heritage: {{ .Release.Service }}
          component: worker
      spec:
        storageClassName: {{ .Values.worker.persistence.storageClass  | quote }}
        accessModes:
        {{ range .Values.worker.persistence.accessModes }}
        - {{ . | quote }}
        {{ end }}
        resources:
          requests:
            storage: {{ .Values.worker.persistence.size | quote }}
  {{ end }}
{{- end }}
